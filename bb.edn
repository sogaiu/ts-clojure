{:min-bb-version "0.4.0"
 :paths ["script" "conf"]
 :tasks {:requires ([babashka.fs :as fs]
                    [conf :as cnf])
         ;;
         :enter (when (System/getenv "VERBOSE")
                  (println "Entering:" (:name (current-task))))
         :leave (when (System/getenv "VERBOSE")
                  (println "Leaving:" (:name (current-task))))
         ;; underlying bits
         check-rust-bits
         {:doc "Check Rust capabilities"
          :task check-rust-bits/-main}
         ensure-tree-sitter
         {:doc "Ensure tree-sitter cli is available"
          :depends [check-rust-bits]
          :task ensure-tree-sitter/-main}
         ensure-tree-sitter-clojure
         {:doc "Ensure tree-sitter-clojure is available"
          :task ensure-tree-sitter-clojure/-main}
         ;; tree-sitter grammar / parser / dynamic library tasks
         gen-parser-src
         {:doc "Generate tree-sitter parser.c and friends"
          :depends [ensure-tree-sitter ensure-tree-sitter-clojure]
          :task gen-parser-src/-main}
         build-dynamic-library
         {:doc "Build dynamic library"
          :depends [gen-parser-src]
          :task build-dynamic-library/-main}
         install-dynamic-library
         {:doc "Install dynamic library"
          :depends [build-dynamic-library]
          :task install-dynamic-library/-main}
         ensure-dynamic-library
         {:doc "Ensure dynamic library is installed"
          :task (when-not (fs/exists? cnf/tsclj-dynamic-library-path)
                  (println "Dynamic library not installed...installing")
                  (run 'install-dynamic-library))}
         corpus-test
         {:doc "Perform corpus test"
          :depends [ensure-tree-sitter
                    ensure-tree-sitter-clojure
                    ensure-dynamic-library]
          :task corpus-test/-main}
         clean
         {:doc "Remove generated and compiled bits"
          :task clean/-main}
         uninstall-dynamic-library
         {:doc "Uninstall dynamic library"
          :task uninstall-dynamic-library/-main}
         ;; Clojars
         gen-clru-list
         {:doc "Make Clojars release jars list"
          :task gen-clru-list/-main}
         batch-fetch-clojars-jars
         {:doc "Batch fetch some Clojars jars"
          :depends [gen-clru-list]
          :task batch-fetch-clojars-jars/-main}
         extract-clojars-jars
         {:doc "Extract content from Clojars jars"
          :task extract-clojars-jars/-main}
         parse-clojars-code
         {:doc "Parse Clojars code samples"
          :depends [ensure-tree-sitter
                    ensure-dynamic-library
                    gen-clru-list
                    batch-fetch-clojars-jars
                    extract-clojars-jars]
          :task parse-clojars-code/-main}
         count-clojars-files
         {:doc "Count Clojars files with various extensions"
          :task count-clojars-files/-main}
         ;; Dewey
         fetch-dewey-all-repos-file
         {:doc "Fetch and uncompress dewey's all-repos.edn file"
          :task fetch-dewey-all-repos-file/-main}
         extract-dewey-git-urls
         {:doc "Extract git repository urls from dewey's all-repos.edn"
          :task extract-dewey-git-urls/-main}
         ;; ClojureDart
         fetch-cljd-code
         {:doc "Retrieve ClojureDart code samples"
          :task fetch-cljd-code/-main}
         parse-cljd-code
         {:doc "Parse ClojureDart code samples"
          :depends [ensure-tree-sitter
                    ensure-dynamic-library
                    fetch-cljd-code]
          :task parse-cljd-code/-main}
         ;; expected issues
         show-expected-failures
         {:doc "Show expected failure examples"
          :depends [ensure-tree-sitter
                    ensure-dynamic-library]
          :task show-expected-failures/-main}
         show-expected-misparses
         {:doc "Show expected misparsing examples"
          :depends [ensure-tree-sitter
                    ensure-dynamic-library]
          :task show-expected-misparses/-main}
         }}
